{"ast":null,"code":"/**\n * @source {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill}\n * but without thisArg (too hard to type, no need to `this`)\n */\nvar toStr = Object.prototype.toString;\n\nfunction isCallable(fn) {\n  return typeof fn === \"function\" || toStr.call(fn) === \"[object Function]\";\n}\n\nfunction toInteger(value) {\n  var number = Number(value);\n\n  if (isNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || !isFinite(number)) {\n    return number;\n  }\n\n  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n}\n\nvar maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(value) {\n  var len = toInteger(value);\n  return Math.min(Math.max(len, 0), maxSafeInteger);\n}\n/**\n * Creates an array from an iterable object.\n * @param iterable An iterable object to convert to an array.\n */\n\n/**\n * Creates an array from an iterable object.\n * @param iterable An iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */\n\n\nexport default function arrayFrom(arrayLike, mapFn) {\n  // 1. Let C be the this value.\n  // edit(@eps1lon): we're not calling it as Array.from\n  var C = Array; // 2. Let items be ToObject(arrayLike).\n\n  var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n  if (arrayLike == null) {\n    throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n  } // 4. If mapfn is undefined, then let mapping be false.\n  // const mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n\n\n  if (typeof mapFn !== \"undefined\") {\n    // 5. else\n    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n    if (!isCallable(mapFn)) {\n      throw new TypeError(\"Array.from: when provided, the second argument must be a function\");\n    }\n  } // 10. Let lenValue be Get(items, \"length\").\n  // 11. Let len be ToLength(lenValue).\n\n\n  var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n  // 13. a. Let A be the result of calling the [[Construct]] internal method\n  // of C with an argument list containing the single item len.\n  // 14. a. Else, Let A be ArrayCreate(len).\n\n  var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n  var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n  var kValue;\n\n  while (k < len) {\n    kValue = items[k];\n\n    if (mapFn) {\n      A[k] = mapFn(kValue, k);\n    } else {\n      A[k] = kValue;\n    }\n\n    k += 1;\n  } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n  A.length = len; // 20. Return A.\n\n  return A;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAA7B;;AAEA,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAO,OAAOA,EAAP,KAAc,UAAd,IAA4BL,KAAK,CAACM,IAAN,CAAWD,EAAX,MAAmB,mBAAtD;AACD;;AAED,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,MAAM,GAAGC,MAAM,CAACF,KAAD,CAAnB;;AAEA,MAAIG,KAAK,CAACF,MAAD,CAAT,EAAmB;AACjB,WAAO,CAAP;AACD;;AAED,MAAIA,MAAM,KAAK,CAAX,IAAgB,CAACG,QAAQ,CAACH,MAAD,CAA7B,EAAuC;AACrC,WAAOA,MAAP;AACD;;AAED,SAAO,CAACA,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiB,CAAC,CAAnB,IAAwBI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASN,MAAT,CAAX,CAA/B;AACD;;AAED,IAAIO,cAAc,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAvC;;AAEA,SAASC,QAAT,CAAkBV,KAAlB,EAAyB;AACvB,MAAIW,GAAG,GAAGZ,SAAS,CAACC,KAAD,CAAnB;AACA,SAAOK,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASF,GAAT,EAAc,CAAd,CAAT,EAA2BH,cAA3B,CAAP;AACD;AACD;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASM,SAAT,CAAmBC,SAAnB,EAA8BC,KAA9B,EAAqC;AAClD;AACA;AACA,MAAIC,CAAC,GAAGC,KAAR,CAHkD,CAGnC;;AAEf,MAAIC,KAAK,GAAG1B,MAAM,CAACsB,SAAD,CAAlB,CALkD,CAKnB;;AAE/B,MAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB,UAAM,IAAIK,SAAJ,CAAc,kEAAd,CAAN;AACD,GATiD,CAShD;AACF;;;AAGA,MAAI,OAAOJ,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACA;AACA,QAAI,CAACpB,UAAU,CAACoB,KAAD,CAAf,EAAwB;AACtB,YAAM,IAAII,SAAJ,CAAc,mEAAd,CAAN;AACD;AACF,GAnBiD,CAmBhD;AACF;;;AAGA,MAAIT,GAAG,GAAGD,QAAQ,CAACS,KAAK,CAACE,MAAP,CAAlB,CAvBkD,CAuBhB;AAClC;AACA;AACA;;AAEA,MAAIC,CAAC,GAAG1B,UAAU,CAACqB,CAAD,CAAV,GAAgBxB,MAAM,CAAC,IAAIwB,CAAJ,CAAMN,GAAN,CAAD,CAAtB,GAAqC,IAAIO,KAAJ,CAAUP,GAAV,CAA7C,CA5BkD,CA4BW;;AAE7D,MAAIY,CAAC,GAAG,CAAR,CA9BkD,CA8BvC;;AAEX,MAAIC,MAAJ;;AAEA,SAAOD,CAAC,GAAGZ,GAAX,EAAgB;AACda,UAAM,GAAGL,KAAK,CAACI,CAAD,CAAd;;AAEA,QAAIP,KAAJ,EAAW;AACTM,OAAC,CAACC,CAAD,CAAD,GAAOP,KAAK,CAACQ,MAAD,EAASD,CAAT,CAAZ;AACD,KAFD,MAEO;AACLD,OAAC,CAACC,CAAD,CAAD,GAAOC,MAAP;AACD;;AAEDD,KAAC,IAAI,CAAL;AACD,GA5CiD,CA4ChD;;;AAGFD,GAAC,CAACD,MAAF,GAAWV,GAAX,CA/CkD,CA+ClC;;AAEhB,SAAOW,CAAP;AACD","names":["toStr","Object","prototype","toString","isCallable","fn","call","toInteger","value","number","Number","isNaN","isFinite","Math","floor","abs","maxSafeInteger","pow","toLength","len","min","max","arrayFrom","arrayLike","mapFn","C","Array","items","TypeError","length","A","k","kValue"],"sources":["D:/React/phpwithreacct/node_modules/dom-accessibility-api/dist/polyfills/array.from.mjs"],"sourcesContent":["/**\n * @source {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill}\n * but without thisArg (too hard to type, no need to `this`)\n */\nvar toStr = Object.prototype.toString;\n\nfunction isCallable(fn) {\n  return typeof fn === \"function\" || toStr.call(fn) === \"[object Function]\";\n}\n\nfunction toInteger(value) {\n  var number = Number(value);\n\n  if (isNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || !isFinite(number)) {\n    return number;\n  }\n\n  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n}\n\nvar maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(value) {\n  var len = toInteger(value);\n  return Math.min(Math.max(len, 0), maxSafeInteger);\n}\n/**\n * Creates an array from an iterable object.\n * @param iterable An iterable object to convert to an array.\n */\n\n\n/**\n * Creates an array from an iterable object.\n * @param iterable An iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */\nexport default function arrayFrom(arrayLike, mapFn) {\n  // 1. Let C be the this value.\n  // edit(@eps1lon): we're not calling it as Array.from\n  var C = Array; // 2. Let items be ToObject(arrayLike).\n\n  var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n  if (arrayLike == null) {\n    throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n  } // 4. If mapfn is undefined, then let mapping be false.\n  // const mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n\n\n  if (typeof mapFn !== \"undefined\") {\n    // 5. else\n    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n    if (!isCallable(mapFn)) {\n      throw new TypeError(\"Array.from: when provided, the second argument must be a function\");\n    }\n  } // 10. Let lenValue be Get(items, \"length\").\n  // 11. Let len be ToLength(lenValue).\n\n\n  var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n  // 13. a. Let A be the result of calling the [[Construct]] internal method\n  // of C with an argument list containing the single item len.\n  // 14. a. Else, Let A be ArrayCreate(len).\n\n  var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n  var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n  var kValue;\n\n  while (k < len) {\n    kValue = items[k];\n\n    if (mapFn) {\n      A[k] = mapFn(kValue, k);\n    } else {\n      A[k] = kValue;\n    }\n\n    k += 1;\n  } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n  A.length = len; // 20. Return A.\n\n  return A;\n}\n"]},"metadata":{},"sourceType":"module"}